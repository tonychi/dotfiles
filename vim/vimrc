set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

"
" My Bundles here:
"
""""""""""""""""""""""""""""""""""""

" Color Scheme
Plugin 'tomasr/molokai'
Plugin 'gummesson/stereokai.vim'

" Status Bar
Plugin 'bling/vim-airline'
" File Browser
Plugin 'scrooloose/nerdtree'
" Class/Module Borwser, Ctags
Plugin 'majutsushi/tagbar'
Plugin 'kien/tabman.vim'

" Finder
Plugin 'kien/ctrlp.vim'
" Undo List
Plugin 'sjl/gundo.vim'
" Task List
Plugin 'fisadev/FixedTaskList.vim'
" Window chooser
Plugin 't9md/vim-choosewin'

" Snippets
Plugin 'honza/vim-snippets'

" Commenter
Plugin 'scrooloose/nerdcommenter'

" EditorConfig
Plugin 'editorconfig/editorconfig-vim'

"
" Git
" Plugin 'motemen/git-vim'
" Plugin 'mhinz/vim-signify'
Plugin 'airblade/vim-gitgutter'

" Dash
Plugin 'rizzatti/dash.vim'

" Zen coding
Plugin 'mattn/emmet-vim'
" Formater
Plugin 'godlygeek/tabular'

"
" Python mode
Plugin 'klen/python-mode'
" Python, Fold
Plugin 'tmhedberg/SimpylFold'
" Python, Debug
" Plugin 'fisadev/vim-debug.vim'

"
" Markdown
Plugin 'plasticboy/vim-markdown'
Plugin 'mzlogin/vim-markdown-toc'

"
" 语言扩展
" Plugin 'othree/html5.vim'
" Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'sheerun/vim-polyglot'
Plugin 'posva/vim-vue'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"配色方案
set background=dark
color desert
"color molokai
"color one

set t_Co=256
set t_ut=

if has("gui_running")
  " 默认窗体宽度和高度
  set columns=150
  set lines=75

  " 去除工具栏显示
  set guioptions-=T
  "set guioptions-=m
  " 隐藏左右下不滚动条
  set guioptions-=L
  set guioptions-=r
  set guioptions-=b

  "使用鼠标
  set mouse=a

  "set cursorcolumn
  set cursorline
  hi cursorline guibg=#000000

endif

"自动补全命令使用菜单挂起列表显示
set wildmenu

"总是显示状态栏
set laststatus=2

"启用搜索高亮
set hlsearch
set incsearch

"禁止搜索时两端循环
"set nowrapscan

set ruler

set linespace=0

"启用行号显示
set number
set numberwidth=5
set relativenumber

set scrolloff=5

"启用输入命令自动显示
set showcmd
set showmode
set showmatch

"编码设置
set enc=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936

"允许退格键删除
set backspace=2

"取消自动换行
set nowrap
set textwidth=100
"整词换行
set linebreak

"自动缩进
set autoindent
set smartindent
set cindent

"设置Tab长度
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

"保留最后50条命令记录
set history=50

" better backup, swap and undos storage
set directory=~/.vim/dirs/tmp     " directory to place swap files in
set backup                        " make backup files
set backupdir=~/.vim/dirs/backups " where to put backup files
set undofile                      " persistent undos - undo after you re-open the file
set undodir=~/.vim/dirs/undos
set viminfo+=n~/.vim/dirs/viminfo

" create needed directories if they don't exist
if !isdirectory(&backupdir)
    call mkdir(&backupdir, "p")
endif
if !isdirectory(&directory)
    call mkdir(&directory, "p")
endif
if !isdirectory(&undodir)
    call mkdir(&undodir, "p")
endif

"set clipboard=unnamedplus

"启用语法侦测
syntax on

"
" Auto Command
"

autocmd! bufwritepost vimrc source ~/.vimrc
autocmd FileType mkd.markdown set textwidth=120 tabstop=3 shiftwidth=3 softtabstop=3

"
" Key mapping
"

let mapleader=","
imap jj <esc>

nmap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" Edit .vimrc
"
map <Leader>ee :e ~/.vimrc<CR>

" Source .vimrc
"
map <Leader>ss :source ~/.vimrc<CR>


" Window focus
"
" map <Leader>l <C-w>l
" map <Leader>h <C-w>h
" map <Leader>k <C-w>k
" map <Leader>j <C-w>j


" Tab manage
"
map <Leader><tab>t :tabnew<CR>
map <Leader><tab>c :tabclose<CR>
map <Leader><tab>n :tabnext<CR>
map <Leader><tab>p :tabprevious<CR>
map <Leader><tab>f :tabfirst<CR>
map <Leader><tab>l :tablast<CR>


"
" NERDTree
"
""""""""""""""""""""""""""""""""""""""""

map <Leader>mm :NERDTreeToggle<CR>
map <F1> :NERDTreeToggle<CR>

let g:NERDTreeWinSize=30
let g:NERDTreeShowBookmarks=1


"
" Tagbar
"
"""""""""""""""""""""""""""""""""""""""""
map <Leader>mc :TagbarToggle<CR>
map <F2> :TagbarToggle<CR>

let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
let g:tabbar_autofocus = 1


"
" Tabman
"
"""""""""""""""""""""""""""""""""""""""""

map <F3> :TMToggle<CR>

let g:tabman_toggle = 'tl'
let g:tabman_focus = 'tf'

"
" Gundo
"
"""""""""""""""""""""""""""""""""""""""""

map <Leader>mh :GundoToggle<CR>

"
" Tasklist
"
"""""""""""""""""""""""""""""""""""""""""

map <Leader>mt :TaskList<CR>

let g:tlWindowPosition = 1
let g:tlTokenList = [ "TODO", "FIXED", "HACK", "UNDONE" ]

"
" Window Chooser
"
"""""""""""""""""""""""""""""""""""""""""

" mapping
nmap  -  <Plug>(choosewin)
" show big letters
let g:choosewin_overlay_enable = 1


" 
" Airline
"
"""""""""""""""""""""""""""""""""""""""""

let g:airline_powerline_fonts = 0

"let g:airline_theme = 'bubblegum'
"let g:airline_theme = 'luna'
let g:airline_theme = 'dark'

" to use fancy symbols for airline, uncomment the following lines and use a
" patched font (more info on the README.rst)
if !exists('g:airline_symbols')
   let g:airline_symbols = {}
endif

let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.whitespace = 'Ξ'

" Airline, extension config
let g:airline#extensions#whitespace#enabled = 0

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

let g:airline#extensions#tagbar#enabled = 1


"
" CtrlP  
"
""""""""""""""""""""""""""""""""""""""""

let g:ctrlp_map = ',,'

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_open_multiple_files = 'v'
let g:ctrlp_by_filename = 1

set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git)$',
  \ 'file': '\v\.(log|jpg|png|jpeg)$'
  \ }

"
" Signify
"
""""""""""""""""""""""""""""""""""""""""

" this first setting decides in which order try to guess your current vcs
" UPDATE it to reflect your preferences, it will speed up opening files
let g:signify_vcs_list = [ 'git', 'hg' ]

let g:signify_update_on_bufenter = 1

" mappings to jump to changed blocks
nmap <leader>gn <plug>(signify-next-hunk)
nmap <leader>gp <plug>(signify-prev-hunk)

" nicer colors
" highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
" highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
" highlight DiffChange        cterm=bold ctermbg=none ctermfg=227
" highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=119
" highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=167
" highlight SignifySignChange cterm=bold ctermbg=237  ctermfg=227


"
" Tabular
"
""""""""""""""""""""""""""""""""""""""""""

" nmap <Leader>a= :Tabularize /=<CR>
" vmap <Leader>a= :Tabularize /=<CR>
" nmap <Leader>a: :Tabularize /:\zs<CR>
" vmap <Leader>a: :Tabularize /:\zs<CR>

" nmap <Leader>a| :Tabularize /:\zs<CR>
" vmap <Leader>a| :Tabularize /:\zs<CR>

map <Leader>ft :TableFormat<CR>

"
" NerdCommenter
"
""""""""""""""""""""""""""""""""""""""""""
let g:NERDSpaceDelims=1

"
" vim-markdown
"
""""""""""""""""""""""""""""""""""""""""""

let g:vim_markdown_folding_disabled=1
let g:vim_markdown_toc_autofit = 0

"
" Python mode
"
""""""""""""""""""""""""""""""""""""""""""

" autocmd FileType python set foldmethod=indent foldlevel=99
" autocmd FileType python setlocal et sta sw=4 sts=4
" autocmd FileType python set cursorcolumn
autocmd BufNewFile, BufRead *.py 
            \ set textwidth=79
            \ set shiftwidth=4
            \ set tabstop=4
            \ set softtabstop=4
            \ set expandtab
            \ set shiftround
            \ set autoindent
            \ set fileformat=unix
            \ set cursorcolumn

" don't use linter, we use syntastic for that
let g:pymode_lint_on_write = 0
let g:pymode_lint_signs = 0
" don't fold python code on open
let g:pymode_folding = 0
" don't load rope by default. Change to 1 to use rope
let g:pymode_rope = 0
" open definitions on same window, and custom mappings for definitions and
" occurrences
let g:pymode_rope_goto_definition_bind = ',d'
let g:pymode_rope_goto_definition_cmd = 'e'
nmap ,D :tab split<CR>:PymodePython rope.goto()<CR>
nmap ,o :RopeFindOccurrences<CR>

" SimpylFold
let g:SimpylFold_docstring_preview = 1

"
" Python, Vim-Debug
"
""""""""""""""""""""""""""""""""""""""""""
map <Leader>t <Nop>
map <Leader>i <Nop>
map <Leader>b <Nop>
map <Leader>d <Nop>
map <Leader>h <Nop>
map <Leader>u <Nop>
map <Leader>w <Nop>
map <Leader>o <Nop>
map <Leader>r <Nop>

let g:vim_debug_disable_mappings = 2

map <C-F5> :Dbg .<CR>
map <F5> :Dbg run<CR>
map <F6> :Dbg quit<CR>
map <F9> :Dbg break<CR>
map <F10> :Dbg over<CR>
map <C-F10> :Dbg here<CR>
map <F11> :Dbg into<CR>
map <C-F11> :Dbg out<CR>

